{
	"info": {
		"_postman_id": "f9702d54-2247-447a-814d-718a7cabbca5",
		"name": "First",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function (){",
							"    pm.response.to.have.status(200);",
							"}); ",
							"",
							"//Проверить, что в body приходит правильный string.",
							"pm.test(\"response_body_is_correct\", function(){",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_1 (/get_method)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/get_method?name=vika&age=24",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "vika"
						},
						{
							"key": "age",
							"value": "24"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2 (/user_info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let jsonFormat = pm.response.json();",
							"",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Name in response = name in request\", function(){",
							"    pm.expect(jsonFormat.name).to.eql(\"vika\");",
							"});",
							"",
							"",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Age in response = age im request\", function(){",
							"    pm.expect(jsonFormat.age).to.eql(\"24\");",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Salary in response = salary in request\", function(){",
							"    pm.expect(jsonFormat.salary).to.eql(2000);",
							"});",
							"",
							"//Спарсить request.",
							"let requestJson = request.data  ",
							"",
							"//Спарсить response",
							"let responseData = pm.response.json ();",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name in response = name in request\", function (){",
							"    pm.expect(responseData.name).to.eql(requestJson.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Age in response = age in request\", function(){",
							"    pm.expect(responseData.age).to.eql(requestJson.age)",
							"})",
							"",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Salary in response = salary in request\", function (){",
							"    pm.expect(responseData.salary).to.eql(Number(requestJson.salary));",
							"});",
							"",
							"//Вывести в консоль параметр family из response.",
							"console.log (responseData.family);",
							"",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"u_salary_1_5_year = salary*4\", function(){",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.eql(Number(requestJson.salary) * 4);",
							"});",
							"",
							"console.log(requestJson);",
							"console.log(responseData);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3\n",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3 (/object_info_1)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_1?name=vika&age=24&weight=50",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "vika"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "weight",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4 (/object_info_2)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_2\n?name=vika&age=24&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_2\n"
					],
					"query": [
						{
							"key": "name",
							"value": "vika"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5 (/object_info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\",function() {",
							"pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let responseData = pm.response.json();",
							"console.log(\"responseData:\", responseData);",
							"",
							"//Спарсить request (Get запрос!)",
							"let requestData = pm.request.toJSON().url.query",
							"console.log(\"requestData:\", requestData);",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name in response = name in request\", function(){",
							"    pm.expect(responseData.name).to.eql(requestData.find(a => a.key === 'name')[\"value\"]);",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test('Age in response = age in request', function() {",
							"    pm.expect(responseData.age).to.eql(requestData[1].value);",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test('Salary in response = salary in request', function(){",
							"    pm.expect(responseData.salary).to.eql(+requestData[2].value);",
							"});",
							"",
							"//Вывести в консоль параметр family из response.",
							"console.log(responseData.family);",
							"",
							"//Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Argument 'dog' have argument 'name' \", function () {",
							"    // Или pm.expect(responseData.family.pets.dog).to.have.any.keys('name');",
							"    pm.expect(responseData.family.pets.dog).to.have.property('name')",
							"});",
							"",
							"//Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Argument 'dog' have argument 'age'\", function(){",
							"    pm.expect(responseData.family.pets.dog).to.have.property('age');",
							"});",
							"",
							"//Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Argument 'name' have value 'Luky'\", function(){",
							"    pm.expect(responseData.family.pets.dog.name).to.eql('Luky')",
							"})",
							"",
							"//Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Argument 'age' have value '4'\", function(){",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=vika&age=24&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "vika"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6 (/object_info_4)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200.",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let responseData = pm.response.json();",
							"console.log(\"responseData: \", responseData);",
							"",
							"//Спарсить request.",
							"let requestData = pm.request.toJSON().url.query; ",
							"console.log('requestData: ', requestData);",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test('Name in response = name in request', function(){",
							"    pm.expect(responseData.name).to.eql(requestData[0].value);",
							"});",
							"",
							"//Вывести в консоль параметр salary из request.",
							"console.log(requestData[2]); //вариант 1",
							"console.log(requestData.find(a => a.key === 'salary')); //вариант 2",
							"",
							"//Вывести в консоль параметр salary из response.",
							"console.log(responseData.salary);",
							"",
							"//Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log('Zero element', responseData.salary [0]); ",
							"",
							"//Вывести в консоль 1-й элемент параметра salary из response.",
							"console.log('The first element', responseData.salary[1]); ",
							"",
							"//Вывести в консоль 2-й элемент параметра salary из response.",
							"console.log('Second element', responseData.salary[2]);",
							"",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test('Zero element = salary in request', function(){",
							"    pm.expect(responseData.salary[0]).to.eql(+requestData[2].value);",
							"});",
							"",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test('The first element = salary in request*2', function(){",
							"    pm.expect(Number(responseData.salary[1])).to.eql(requestData[2].value*2);",
							"});",
							"console.log(responseData.salary[1]);",
							"console.log(requestData[2].value*2);",
							"",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test('The second element = salary in request*3', function(){",
							"    pm.expect(+responseData.salary[2]).to.eql(requestData[2].value*3);",
							"})",
							"",
							"//Создать в окружении переменную name --> Передать в окружение переменную name",
							"pm.environment.set(\"name\", requestData[0].value);",
							"console.log(\"fff\", requestData[0].value);",
							"",
							"//Создать в окружении переменную age --> Передать в окружение переменную age",
							"pm.environment.set(\"age\", requestData[1].value);",
							"",
							"//Создать в окружении переменную salary --> Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", requestData[2].value);",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for(let i = 0; i < responseData.salary.length; i++) {",
							"    console.log(responseData.salary[i]);",
							"};  ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=vika&age=24&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "vika"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7 (/user_info_2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test('Status code is 200', function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let responseData = pm.response.json();",
							"console.log(\"response: \", responseData);",
							"",
							"//Cпарсить request.",
							"let requestData = request.data;",
							"console.log(\"request: \", requestData);",
							"",
							"//Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Response have 'start_qa_salary\", function(){",
							"    pm.expect(responseData).to.have.any.keys('start_qa_salary'); ",
							"}); ",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"response have 'qa_salary_after_6_months'\", function(){",
							"    pm.expect(responseData).to.have.any.keys('qa_salary_after_6_months');",
							"}); ",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Response have 'qa_salary_after_12_months'\", function(){",
							"    pm.expect(responseData).to.have.any.keys('qa_salary_after_12_months');",
							"});",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Response have'qa_salary_after_1.5_year'\", function(){",
							"    pm.expect(responseData).to.have.any.keys('qa_salary_after_1.5_year');",
							"} );",
							"",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Response have 'qa_salary_after_3.5_years'\", function(){",
							"    pm.expect(responseData).to.have.any.keys('qa_salary_after_3.5_years');",
							"});",
							"",
							"//роверить, что json response имеет параметр person",
							"pm.test(\"Response have 'person'\", function(){",
							"    pm.expect(responseData).to.have.any.keys('person');",
							"});",
							"",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"start_qa_salary in response = salary in request\", function(){",
							"    pm.expect(responseData.start_qa_salary).to.eql(+requestData.salary);",
							"}); ",
							"",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months = salary in request*2\", function(){",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(+requestData.salary*2);",
							"});",
							"console.log(+requestData.salary*2);",
							"",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months = salary * 2.7 in request\", function(){",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(+requestData.salary*2.7);",
							"});",
							"console.log(+requestData.salary*2.7);",
							"",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test('qa_salary_after_1.5_year = salary in request * 3.3', function(){",
							"    pm.expect(responseData[\"qa_salary_after_1.5_year\"]).to.eql(+requestData.salary*3.3);",
							"});",
							"",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"a_salary_after_3.5_years = salary in request *3.8\", function(){",
							"    pm.expect(responseData[\"qa_salary_after_3.5_years\"]).to.eql(+requestData.salary*3.8);",
							"});",
							"",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"The first element u_name in respose = salary in request\", function(){",
							"    pm.expect(responseData.person.u_name[1]).to.eql(+requestData.salary);",
							"});",
							"",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"U_age in response = age in request\", function(){",
							"    pm.expect(responseData.person.u_age).to.eql(+requestData.age);",
							"});",
							"",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years in response = salary in request *4.2\", function(){",
							"    pm.expect(responseData.person.u_salary_5_years).to.eql(+requestData.salary*4.2);",
							"}); ",
							"",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for ( property in responseData.person) {",
							"  console.log(`${property}: ${responseData.person[property]}`); ",
							"  // или ",
							"  console.log(property + ':'+ responseData.person[property]);",
							"}; ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}